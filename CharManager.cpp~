#include "CharManager.h"


void CharManager::Clear()
{
   //delete the chars
  std::vector<Character*>::iterator it = m_Chars.begin();
  for (it; it != m_Chars.end(); ++it)
  {
#ifdef LOG
    std::cout << "deleting entity id: " << (*it)->ID() << " of type "
              << GetNameOfType((*it)->EntityType()) << "(" << (*it)->EntityType() << ")" <<endl;
#endif

    delete *it;
  }
  

  m_Chars.clear();
 
}


void CharManager::Update()
{
  bool bSpawnPossible = true;

   std::vector<Character*>::iterator curChar = m_Chars.begin();
  for (curChar; curChar != m_Chars.end(); ++curChar)
  {
    //if this bot's status is 'respawning' attempt to resurrect it from
    //an unoccupied spawn point
    if ((*curChar)->isSpawning() && bSpawnPossible)
    { 
      bSpawnPossible = AttemptToAddChar(*curChar);
    }
    
    //if this bot's status is 'dead' add a grave at its current location 
    //then change its status to 'respawning'
    else if ((*curChar)->isDead())
    { 
      //create a grave
      GraveManager::Instance()->AddGrave((*curChar)->Pos());

      //change its status to spawning
      (*curChar)->SetSpawning();
    }

    //if this bot is alive update it.
    else if ( (*curChar)->isAlive())
    { 
      (*curChar)->Update();  (*curChar)->draw();
       
    }  
  } 
}


bool CharManager::AttemptToAddChar(Character* pChar)
{
  return true;
}
